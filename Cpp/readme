You can find out that if you add a harmonic to vi array that is make by the frequency of base_frequency*N , for
N = 2,3,4,... , and the sampling rate is multiple of base_frequency(complying with Nyquist frequency) , then the 
harmonic signal will not affect the result of frequency calculated by Smart_DFT().
ex:
vi = (np.cos(2*np.pi*freq_*t + theta)+np.cos(2*np.pi*(base_frequency*3)*t + theta))[0:ndata_].astype('complex128')
the result of frequency calculated by Smart_DFT() and harmonic_analysis() will be freq_.

But this method can't calculate the freq_ that is the multiple of base_frequency.
(freq_ = base_frequency * N , N = 2,3,4...)
ex:
freq_ = 100 (Hz)
base_frequency = 50 (Hz) 
the result will be wrong.

And if fs_(the sampling rate) is not the multiple of base_frequency(complying with Nyquist frequency) , the result of 
angle and magnitude will be wrong.
ex:
freq_ != N * base_frequency, N = 2,3,4,...
base_frequency = 60 (Hz)
fs_ = 2000 (Hz)
The result of frequency will be correct.
But the result of angle and magnitude will be wrong.(Because of some approximate)

Let me set the vi array to be 10% of the whole array(size = 0.1 * fs_ = ndata_).
vi[shift:ndata+shift](shift = 0) gets samples from the first variable in the vi array, so if I set the ndata_ = 0.1 * fs,
the angle calculated by Smart_DFT() function will be the angle that I set of vi.
But if I use vi[i:ndata_+i](i != 0 & 750), then the angle calculated by Smart_DFT() will not be the angle I set of vi, because there is a shift(i points) of the first
sample point.
If I set freq_ to be a number of multiples of 10 (ex : 10, 20, 30, ...) and
vi[ndata_:ndata_+ndata_](ndata_ = 750 = fs_ * 0.1), then I can get the angle result as the original angle we set, because
the first sample point is the starting point of the waves we generate of vi. And if freq_ is not a
number of multiples of 10 (ex : 68, 21, 103, ...), and the samples is same as
vi[ndata_:ndata_+ndata_](ndata_ = 750 = fs * 0.1), then the angle will not be the angle I set of vi.
