Cython is an optimising static compiler for both the Python programming language and the extended Cython programming language (based on Pyrex).
It makes writing C extensions for Python as easy as Python itself. To see introduction : https://cython.org/

To start running the code you should:

step 1.  download cython (in verion2). example in linux : sudo apt-get install cython
step 2.  perpare your .pyx file, in here is SDFT.pyx
step 3.  perpare setup.py file and do in linux : sudo python setup.py build_ext --inplace

Then you will have created .c and .so file, that python can import the file and the functions(cpdef or def) in it.
So,

step 4.  do in linux : sudo python start.py

To change parameters, simply modify start.py file.



You can find out that if you add a harmonic to vi array that is make by the frequency of freq_*N , for
N = 1,2,3,... , and the sampling rate is multiple of base_frequency(complying with Nyquist frequency) , then the 
harmonic signal will not affect the result of frequency calculated by Smart_DFT().
ex:
vi = (np.cos(2*np.pi*freq_*t + theta)+np.cos(2*np.pi*(freq_*N)*t + theta))[0:ndata_].astype('complex128')
the result of frequency calculated by Smart_DFT() and harmonic_analysis() will be freq_.

But this method can't calculate the freq_ that is the multiple of base_frequency.
(freq_ = base_frequency * N , N = 2,3,4...)
ex:
freq_ = 100 (Hz)
base_frequency = 50 (Hz)
the result will be wrong.

And if fs_(the sampling rate) is not the multiple of base_frequency(complying with Nyquist frequency) , the result of 
angle and magnitude will be wrong.
ex:
base_frequency = 60 (Hz)
fs_ = 2000 (Hz)
The result fo frequency will be correct.
But the result of angle and magnitude will be wrong.

Let me set the vi array to be 10% of the whole array(size = 0.1 * fs_ = ndata).
vi[shift:ndata+shift](shift = 0) gets samples from the first variable in the vi array, so if I set the ndata = 0.1 * fs,
the angle calculated by Smart_DFT() function will be the angle that I set in make_signal().
But if I use vi[i:ndata+i](i != 0 & 750), then the angle calculated by Smart_DFT() will not be the angle I set in
make_signal(), because there is a shift(i points) of the first sample point.
If I set frequency_siganl to be a number of multiples of 10 (ex : 10, 20, 30, ...) and
vi[ndata:ndata+ndata](ndata = 750 = fs * 0.1), then I can get the angle result as the original angle we set, because
the first sample point is the starting point of the waves we generate in make_signal(). And if frequency_siganl is not a
number of multiples of 10 (ex : 68, 21, 103, ...), and the samples is same as
vi[ndata:ndata+ndata](ndata = 750 = fs * 0.1), then the angle will not be the angle I set in make_signal().
